/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Groovy application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.5/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
    // Apply the groovy Plugin to add support for Groovy.
    id 'groovy'

    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'

    // Build a fat jar
    id 'com.github.johnrengelman.shadow' version '8.1.1'

    // Plugin to download and unpack coatjava
    id 'de.undercouch.download' version '5.4.0'
}

def coatjavaVersion = '13.4.0'
def coatjavaFile = "coatjava-${coatjavaVersion}.tar.gz"
def coatjavaUrl = "https://github.com/JeffersonLab/coatjava/releases/download/${coatjavaVersion}/${coatjavaFile}"
def unpackDir = file("$buildDir")

import de.undercouch.gradle.tasks.download.Download

tasks.register('downloadCoatJava', Download) {
    src coatjavaUrl
    dest "$buildDir/${coatjavaFile}"
    overwrite false
    onlyIfModified true
    doFirst {
        println("INFO: Downloading coatjava from $coatjavaUrl to $dest")
    }
    doLast {
        println("DONE: Downloaded coatjava to $dest")
    }
}

tasks.register('unpackCoatJava', Copy) {
    dependsOn 'downloadCoatJava'
    from tarTree(resources.gzip(file("$buildDir/${coatjavaFile}")))
    into unpackDir
    doFirst {
        println("INFO: Unpacking coatjava to $unpackDir")
    }
    doLast {
        println("DONE: Unpacked coatjava to $unpackDir")
    }
}

tasks.named('compileJava') {
    dependsOn 'unpackCoatJava'
}
tasks.named('compileGroovy') {
    dependsOn 'unpackCoatJava'
}
tasks.named('classes') {
    dependsOn 'unpackCoatJava'
}
tasks.named('shadowJar') {
    dependsOn 'unpackCoatJava'
}

repositories {
    mavenCentral()
    mavenLocal()
    flatDir {
        dirs "${unpackDir}/lib/clas"
    }
    flatDir {
        dirs "${rootDir}/clasqaDB"
    }
    flatDir {
        dirs "${rootDir}/j2root/target"
    }
}

dependencies {
    // Use the latest Groovy version for building this library
    implementation libs.groovy.all
    implementation libs.groovy.json

    // This dependency is used by the application.
    implementation libs.guava

    // Use the awesome Spock testing and specification framework even with Java
    testImplementation libs.spock.core
    testImplementation libs.junit

    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    // CLAS12 libraries
    implementation files("$buildDir/coatjava-${coatjavaVersion}/lib/clas/coat-libs-${coatjavaVersion}.jar")
    def clasqajar = file("$rootDir/clasqaDB/clasqaDB.jar")
    def jrootjar = file("$rootDir/j2root/target/JRoot-1.0.jar")
    if (clasqajar.exists() && jrootjar.exists()) {
        implementation 'target:JRoot-1.0' // from https://github.com/drewkenjo/j2root
        implementation 'clasqaDB:clasqa'  // from https://github.com/JeffersonLab/clasqaDB
    } else {
        implementation files('/opt/clas12-analysis/app-all-1.0.jar')
    }
}

application {
    // Define the main class for the application.
    mainClass = 'org.jlab.analysis.Main'
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}

tasks.distZip {
   duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

tasks.distTar {
   duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

jar {
    manifest {
        attributes(
            'Main-Class': application.mainClass.get()
        )
    }
}

shadowJar {
    archiveBaseName.set('app-all')
    archiveClassifier.set('')
    archiveVersion.set('1.0')
}

task generateGroovydoc(type: Groovydoc) {
    description = 'Generate Groovy API docs'
    source = sourceSets.main.allGroovy
    classpath = sourceSets.main.compileClasspath
    destinationDir = file("$rootDir/docs/_static")
    // optional settings:
    use = true
    windowTitle = 'Groovy API'
}
